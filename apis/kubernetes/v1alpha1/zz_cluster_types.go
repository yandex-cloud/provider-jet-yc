/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CiliumObservation struct {
}

type CiliumParameters struct {
}

type ClusterObservation struct {

	// (Computed) The Kubernetes cluster creation timestamp.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Computed) Health of the Kubernetes cluster.
	Health *string `json:"health,omitempty" tf:"health,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Log group where cluster stores cluster system logs, like audit, events, or controlplane logs.
	LogGroupID *string `json:"logGroupId,omitempty" tf:"log_group_id,omitempty"`

	// Kubernetes master configuration options. The structure is documented below.
	// +kubebuilder:validation:Required
	Master []MasterObservation `json:"master,omitempty" tf:"master,omitempty"`

	// (Computed)Status of the Kubernetes cluster.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ClusterParameters struct {

	// CIDR block. IP range for allocating pod addresses.
	// It should not overlap with any subnet in the network the Kubernetes cluster located in. Static routes will be
	// set up for this CIDR blocks in node subnets.
	// +kubebuilder:validation:Optional
	ClusterIPv4Range *string `json:"clusterIpv4Range,omitempty" tf:"cluster_ipv4_range,omitempty"`

	// Identical to cluster_ipv4_range but for IPv6 protocol.
	// +kubebuilder:validation:Optional
	ClusterIPv6Range *string `json:"clusterIpv6Range,omitempty" tf:"cluster_ipv6_range,omitempty"`

	// A description of the Kubernetes cluster.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the folder that the Kubernetes cluster belongs to.
	// If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// cluster KMS provider parameters.
	// +kubebuilder:validation:Optional
	KMSProvider []KMSProviderParameters `json:"kmsProvider,omitempty" tf:"kms_provider,omitempty"`

	// A set of key/value label pairs to assign to the Kubernetes cluster.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Kubernetes master configuration options. The structure is documented below.
	// +kubebuilder:validation:Required
	Master []MasterParameters `json:"master" tf:"master,omitempty"`

	// Name of a specific Kubernetes cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the cluster network.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Network Implementation options. The structure is documented below.
	// +kubebuilder:validation:Optional
	NetworkImplementation []NetworkImplementationParameters `json:"networkImplementation,omitempty" tf:"network_implementation,omitempty"`

	// Network policy provider for the cluster. Possible values: CALICO.
	// +kubebuilder:validation:Optional
	NetworkPolicyProvider *string `json:"networkPolicyProvider,omitempty" tf:"network_policy_provider,omitempty"`

	// Size of the masks that are assigned to each node in the cluster. Effectively limits maximum number of pods for each node.
	// +kubebuilder:validation:Optional
	NodeIPv4CidrMaskSize *float64 `json:"nodeIpv4CidrMaskSize,omitempty" tf:"node_ipv4_cidr_mask_size,omitempty"`

	// Service account to be used by the worker nodes of the Kubernetes cluster
	// to access Container Registry or to push node logs and metrics.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/iam/v1alpha1.ServiceAccount
	// +kubebuilder:validation:Optional
	NodeServiceAccountID *string `json:"nodeServiceAccountId,omitempty" tf:"node_service_account_id,omitempty"`

	// Reference to a ServiceAccount in iam to populate nodeServiceAccountId.
	// +kubebuilder:validation:Optional
	NodeServiceAccountIDRef *v1.Reference `json:"nodeServiceAccountIdRef,omitempty" tf:"-"`

	// Selector for a ServiceAccount in iam to populate nodeServiceAccountId.
	// +kubebuilder:validation:Optional
	NodeServiceAccountIDSelector *v1.Selector `json:"nodeServiceAccountIdSelector,omitempty" tf:"-"`

	// Cluster release channel.
	// +kubebuilder:validation:Optional
	ReleaseChannel *string `json:"releaseChannel,omitempty" tf:"release_channel,omitempty"`

	// Service account to be used for provisioning Compute Cloud and VPC resources
	// for Kubernetes cluster. Selected service account should have edit role on the folder where the Kubernetes
	// cluster will be located and on the folder where selected network resides.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/iam/v1alpha1.ServiceAccount
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Reference to a ServiceAccount in iam to populate serviceAccountId.
	// +kubebuilder:validation:Optional
	ServiceAccountIDRef *v1.Reference `json:"serviceAccountIdRef,omitempty" tf:"-"`

	// Selector for a ServiceAccount in iam to populate serviceAccountId.
	// +kubebuilder:validation:Optional
	ServiceAccountIDSelector *v1.Selector `json:"serviceAccountIdSelector,omitempty" tf:"-"`

	// CIDR block. IP range Kubernetes service Kubernetes cluster
	// IP addresses will be allocated from. It should not overlap with any subnet in the network
	// the Kubernetes cluster located in.
	// +kubebuilder:validation:Optional
	ServiceIPv4Range *string `json:"serviceIpv4Range,omitempty" tf:"service_ipv4_range,omitempty"`

	// Identical to service_ipv4_range but for IPv6 protocol.
	// +kubebuilder:validation:Optional
	ServiceIPv6Range *string `json:"serviceIpv6Range,omitempty" tf:"service_ipv6_range,omitempty"`
}

type KMSProviderObservation struct {
}

type KMSProviderParameters struct {

	// KMS key ID.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/kms/v1alpha1.SymmetricKey
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// Reference to a SymmetricKey in kms to populate keyId.
	// +kubebuilder:validation:Optional
	KeyIDRef *v1.Reference `json:"keyIdRef,omitempty" tf:"-"`

	// Selector for a SymmetricKey in kms to populate keyId.
	// +kubebuilder:validation:Optional
	KeyIDSelector *v1.Selector `json:"keyIdSelector,omitempty" tf:"-"`
}

type LocationObservation struct {
}

type LocationParameters struct {

	// ID of the subnet. If no ID is specified, and there only one subnet in specified zone, an address in this subnet will be allocated.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// ID of the availability zone.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type MaintenancePolicyObservation struct {
}

type MaintenancePolicyParameters struct {

	// Boolean flag that specifies if master can be upgraded automatically. When omitted, default value is TRUE.
	// +kubebuilder:validation:Required
	AutoUpgrade *bool `json:"autoUpgrade" tf:"auto_upgrade,omitempty"`

	// (Computed) This structure specifies maintenance window, when update for master is allowed. When omitted, it defaults to any time.
	// To specify time of day interval, for all days, one element should be provided, with two fields set, start_time and duration.
	// Please see zonal_cluster_resource_name config example.
	// +kubebuilder:validation:Optional
	MaintenanceWindow []MaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`
}

type MaintenanceWindowObservation struct {
}

type MaintenanceWindowParameters struct {

	// +kubebuilder:validation:Optional
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// +kubebuilder:validation:Required
	Duration *string `json:"duration" tf:"duration,omitempty"`

	// +kubebuilder:validation:Required
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`
}

type MasterObservation struct {

	// (Computed) PEM-encoded public certificate that is the root of trust for the Kubernetes cluster.
	ClusterCACertificate *string `json:"clusterCaCertificate,omitempty" tf:"cluster_ca_certificate,omitempty"`

	// (Computed) An IPv4 external network address that is assigned to the master.
	ExternalV4Address *string `json:"externalV4Address,omitempty" tf:"external_v4_address,omitempty"`

	// (Computed) External endpoint that can be used to access Kubernetes cluster API from the internet (outside of the cloud).
	ExternalV4Endpoint *string `json:"externalV4Endpoint,omitempty" tf:"external_v4_endpoint,omitempty"`

	// (Computed) An IPv4 internal network address that is assigned to the master.
	InternalV4Address *string `json:"internalV4Address,omitempty" tf:"internal_v4_address,omitempty"`

	// (Computed) Internal endpoint that can be used to connect to the master from cloud networks.
	InternalV4Endpoint *string `json:"internalV4Endpoint,omitempty" tf:"internal_v4_endpoint,omitempty"`

	// (Computed) Information about cluster version. The structure is documented below.
	VersionInfo []VersionInfoObservation `json:"versionInfo,omitempty" tf:"version_info,omitempty"`
}

type MasterParameters struct {

	// (Computed) Maintenance policy for Kubernetes master.
	// If policy is omitted, automatic revision upgrades of the kubernetes master are enabled and could happen at any time.
	// Revision upgrades are performed only within the same minor version, e.g. 1.13.
	// Minor version upgrades (e.g. 1.13->1.14) should be performed manually. The structure is documented below.
	// +kubebuilder:validation:Optional
	MaintenancePolicy []MaintenancePolicyParameters `json:"maintenancePolicy,omitempty" tf:"maintenance_policy,omitempty"`

	// (Computed) Boolean flag. When true, Kubernetes master will have visible ipv4 address.
	// +kubebuilder:validation:Optional
	PublicIP *bool `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// Initialize parameters for Regional Master (highly available master). The structure is documented below.
	// +kubebuilder:validation:Optional
	Regional []RegionalParameters `json:"regional,omitempty" tf:"regional,omitempty"`

	// List of security group IDs to which the Kubernetes cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// (Computed) Version of Kubernetes that will be used for master.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// Initialize parameters for Zonal Master (single node master). The structure is documented below.
	// +kubebuilder:validation:Optional
	Zonal []ZonalParameters `json:"zonal,omitempty" tf:"zonal,omitempty"`
}

type NetworkImplementationObservation struct {
}

type NetworkImplementationParameters struct {

	// Cilium network implementation configuration. No options exist.
	// +kubebuilder:validation:Optional
	Cilium []CiliumParameters `json:"cilium,omitempty" tf:"cilium,omitempty"`
}

type RegionalObservation struct {
}

type RegionalParameters struct {

	// Array of locations, where master instances will be allocated. The structure is documented below.
	// +kubebuilder:validation:Optional
	Location []LocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// Name of availability region (e.g. "ru-central1"), where master instances will be allocated.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type VersionInfoObservation struct {

	// Current Kubernetes version, major.minor (e.g. 1.15).
	CurrentVersion *string `json:"currentVersion,omitempty" tf:"current_version,omitempty"`

	// Boolean flag.
	// Newer revisions may include Kubernetes patches (e.g 1.15.1 -> 1.15.2) as well
	// as some internal component updates - new features or bug fixes in yandex-specific
	// components either on the master or nodes.
	NewRevisionAvailable *bool `json:"newRevisionAvailable,omitempty" tf:"new_revision_available,omitempty"`

	// Human readable description of the changes to be applied
	// when updating to the latest revision. Empty if new_revision_available is false.
	NewRevisionSummary *string `json:"newRevisionSummary,omitempty" tf:"new_revision_summary,omitempty"`

	// Boolean flag. The current version is on the deprecation schedule,
	// component (master or node group) should be upgraded.
	VersionDeprecated *bool `json:"versionDeprecated,omitempty" tf:"version_deprecated,omitempty"`
}

type VersionInfoParameters struct {
}

type ZonalObservation struct {
}

type ZonalParameters struct {

	// ID of the subnet. If no ID is specified, and there only one subnet in specified zone, an address in this subnet will be allocated.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// ID of the availability zone.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API. Allows management of Yandex Kubernetes Cluster. For more information, see
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec"`
	Status            ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
