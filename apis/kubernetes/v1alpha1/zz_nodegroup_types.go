/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllocationPolicyLocationObservation struct {
}

type AllocationPolicyLocationParameters struct {

	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	// ID of the subnet, that will be used by one compute instance in node group.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	// ID of the availability zone where for one compute instance in node group.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type AllocationPolicyObservation struct {
}

type AllocationPolicyParameters struct {

	// +kubebuilder:validation:Optional
	// Repeated field, that specify subnets (zones), that will be used by node group compute instances. The structure is documented below.   
	Location []AllocationPolicyLocationParameters `json:"location,omitempty" tf:"location,omitempty"`
}

type AutoScaleObservation struct {
}

type AutoScaleParameters struct {

	// +kubebuilder:validation:Required
	// Initial number of instances in the node group.
	Initial *float64 `json:"initial" tf:"initial,omitempty"`

	// +kubebuilder:validation:Required
	// Maximum number of instances in the node group.
	Max *float64 `json:"max" tf:"max,omitempty"`

	// +kubebuilder:validation:Required
	// Minimum number of instances in the node group.
	Min *float64 `json:"min" tf:"min,omitempty"`
}

type BootDiskObservation struct {
}

type BootDiskParameters struct {

	// +kubebuilder:validation:Optional
	// The size of the disk in GB. Allowed minimal size: 64 GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	// The disk type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ContainerRuntimeObservation struct {
}

type ContainerRuntimeParameters struct {

	// +kubebuilder:validation:Required
	// The disk type.
	Type *string `json:"type" tf:"type,omitempty"`
}

type DeployPolicyObservation struct {
}

type DeployPolicyParameters struct {

	// +kubebuilder:validation:Required
	// The maximum number of instances that can be temporarily allocated above the group's target size during the update.
	MaxExpansion *float64 `json:"maxExpansion" tf:"max_expansion,omitempty"`

	// +kubebuilder:validation:Required
	// The maximum number of running instances that can be taken offline during update.
	MaxUnavailable *float64 `json:"maxUnavailable" tf:"max_unavailable,omitempty"`
}

type FixedScaleObservation struct {
}

type FixedScaleParameters struct {

	// +kubebuilder:validation:Optional
	// The size of the disk in GB. Allowed minimal size: 64 GB.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type InstanceTemplateObservation struct {
}

type InstanceTemplateParameters struct {

	// +kubebuilder:validation:Optional
	// The specifications for boot disks that will be attached to the instance. The structure is documented below.
	BootDisk []BootDiskParameters `json:"bootDisk,omitempty" tf:"boot_disk,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) Container runtime configuration. The structure is documented below.
	ContainerRuntime []ContainerRuntimeParameters `json:"containerRuntime,omitempty" tf:"container_runtime,omitempty"`

	// +kubebuilder:validation:Optional
	// The set of metadata `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	// Boolean flag, enables NAT for node group compute instances.
	NAT *bool `json:"nat,omitempty" tf:"nat,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) Type of network acceleration. Values: `standard`, `software_accelerated`.
	NetworkAccelerationType *string `json:"networkAccelerationType,omitempty" tf:"network_acceleration_type,omitempty"`

	// +kubebuilder:validation:Optional
	// An array with the network interfaces that will be attached to the instance. The structure is documented below.
	NetworkInterface []NetworkInterfaceParameters `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) The placement policy configuration. The structure is documented below.
	PlacementPolicy []PlacementPolicyParameters `json:"placementPolicy,omitempty" tf:"placement_policy,omitempty"`

	// +kubebuilder:validation:Optional
	// The ID of the hardware platform configuration for the node group compute instances.
	PlatformID *string `json:"platformId,omitempty" tf:"platform_id,omitempty"`

	// +kubebuilder:validation:Optional
	Resources []ResourcesParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// +kubebuilder:validation:Optional
	// The scheduling policy for the instances in node group. The structure is documented below.
	SchedulingPolicy []SchedulingPolicyParameters `json:"schedulingPolicy,omitempty" tf:"scheduling_policy,omitempty"`
}

type MaintenancePolicyMaintenanceWindowObservation struct {
}

type MaintenancePolicyMaintenanceWindowParameters struct {

	// +kubebuilder:validation:Optional
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// +kubebuilder:validation:Required
	Duration *string `json:"duration" tf:"duration,omitempty"`

	// +kubebuilder:validation:Required
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`
}

type NetworkInterfaceObservation struct {
}

type NetworkInterfaceParameters struct {

	// +kubebuilder:validation:Optional
	// (Optional) Allocate an IPv4 address for the interface. The default value is `true`.
	IPv4 *bool `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) If true, allocate an IPv6 address for the interface. The address will be automatically assigned from the specified subnet.
	IPv6 *bool `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// +kubebuilder:validation:Optional
	// Boolean flag, enables NAT for node group compute instances.
	NAT *bool `json:"nat,omitempty" tf:"nat,omitempty"`

	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	// (Optional) Security group ids for network interface.
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	// The IDs of the subnets.
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`
}

type NodeGroupMaintenancePolicyObservation struct {
}

type NodeGroupMaintenancePolicyParameters struct {

	// +kubebuilder:validation:Required
	AutoRepair *bool `json:"autoRepair" tf:"auto_repair,omitempty"`

	// +kubebuilder:validation:Required
	// (Required) Boolean flag that specifies if node group can be upgraded automatically. When omitted, default value is TRUE.
	AutoUpgrade *bool `json:"autoUpgrade" tf:"auto_upgrade,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) (Computed) Set of day intervals, when maintenance is allowed for this node group. When omitted, it defaults to any time. 
	MaintenanceWindow []MaintenancePolicyMaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`
}

type NodeGroupObservation struct {
	// (Computed) The Kubernetes node group creation timestamp.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed) ID of instance group that is used to manage this Kubernetes node group.
	InstanceGroupID *string `json:"instanceGroupId,omitempty" tf:"instance_group_id,omitempty"`

	// (Computed) Status of the Kubernetes node group.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Computed) Information about Kubernetes node group version. The structure is documented below.
	VersionInfo []NodeGroupVersionInfoObservation `json:"versionInfo,omitempty" tf:"version_info,omitempty"`
}

type NodeGroupParameters struct {

	// +kubebuilder:validation:Optional
	// This argument specify subnets (zones), that will be used by node group compute instances. The structure is documented below.
	AllocationPolicy []AllocationPolicyParameters `json:"allocationPolicy,omitempty" tf:"allocation_policy,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional, Forces new resource) A list of allowed unsafe sysctl parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).
	AllowedUnsafeSysctls []*string `json:"allowedUnsafeSysctls,omitempty" tf:"allowed_unsafe_sysctls,omitempty"`

	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	// (Required) The ID of the Kubernetes cluster that this node group belongs to.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	// Deploy policy of the node group. The structure is documented below.
	DeployPolicy []DeployPolicyParameters `json:"deployPolicy,omitempty" tf:"deploy_policy,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) A description of the Kubernetes node group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	// (Required) Template used to create compute instances in this Kubernetes node group. The structure is documented below.
	InstanceTemplate []InstanceTemplateParameters `json:"instanceTemplate" tf:"instance_template,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) A set of key/value label pairs assigned to the Kubernetes node group.
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) (Computed) Maintenance policy for this Kubernetes node group.
	MaintenancePolicy []NodeGroupMaintenancePolicyParameters `json:"maintenancePolicy,omitempty" tf:"maintenance_policy,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) Name of a specific Kubernetes node group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional, Forces new resource) A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
	NodeLabels map[string]*string `json:"nodeLabels,omitempty" tf:"node_labels,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional, Forces new resource) A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
	NodeTaints []*string `json:"nodeTaints,omitempty" tf:"node_taints,omitempty"`

	// +kubebuilder:validation:Required
	// (Required) Scale policy of the node group. The structure is documented below.
	ScalePolicy []ScalePolicyParameters `json:"scalePolicy" tf:"scale_policy,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) Version of Kubernetes that will be used for Kubernetes node group.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NodeGroupVersionInfoObservation struct {
	// Current Kubernetes version, major.minor (e.g. 1.15).
	CurrentVersion *string `json:"currentVersion,omitempty" tf:"current_version,omitempty"`

	// True/false flag.
	NewRevisionAvailable *bool `json:"newRevisionAvailable,omitempty" tf:"new_revision_available,omitempty"`

	// Human readable description of the changes to be applied
	NewRevisionSummary *string `json:"newRevisionSummary,omitempty" tf:"new_revision_summary,omitempty"`

	// True/false flag. The current version is on the deprecation schedule,
	VersionDeprecated *bool `json:"versionDeprecated,omitempty" tf:"version_deprecated,omitempty"`
}

type NodeGroupVersionInfoParameters struct {
}

type PlacementPolicyObservation struct {
}

type PlacementPolicyParameters struct {

	// +kubebuilder:validation:Required
	// (Optional) Specifies the id of the Placement Group to assign to the instances.
	PlacementGroupID *string `json:"placementGroupId" tf:"placement_group_id,omitempty"`
}

type ResourcesObservation struct {
}

type ResourcesParameters struct {

	// +kubebuilder:validation:Optional
	CoreFraction *float64 `json:"coreFraction,omitempty" tf:"core_fraction,omitempty"`

	// +kubebuilder:validation:Optional
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// +kubebuilder:validation:Optional
	Gpus *float64 `json:"gpus,omitempty" tf:"gpus,omitempty"`

	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`
}

type ScalePolicyObservation struct {
}

type ScalePolicyParameters struct {

	// +kubebuilder:validation:Optional
	// Scale policy for an autoscaled node group. The structure is documented below.
	AutoScale []AutoScaleParameters `json:"autoScale,omitempty" tf:"auto_scale,omitempty"`

	// +kubebuilder:validation:Optional
	// Scale policy for a fixed scale node group. The structure is documented below.
	FixedScale []FixedScaleParameters `json:"fixedScale,omitempty" tf:"fixed_scale,omitempty"`
}

type SchedulingPolicyObservation struct {
}

type SchedulingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	// Specifies if the instance is preemptible. Defaults to false.
	Preemptible *bool `json:"preemptible,omitempty" tf:"preemptible,omitempty"`
}

// NodeGroupSpec defines the desired state of NodeGroup
type NodeGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodeGroupParameters `json:"forProvider"`
}

// NodeGroupStatus defines the observed state of NodeGroup.
type NodeGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodeGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NodeGroup is the Schema for the NodeGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type NodeGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodeGroupSpec   `json:"spec"`
	Status            NodeGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeGroupList contains a list of NodeGroups
type NodeGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodeGroup `json:"items"`
}

// Repository type metadata.
var (
	NodeGroup_Kind             = "NodeGroup"
	NodeGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodeGroup_Kind}.String()
	NodeGroup_KindAPIVersion   = NodeGroup_Kind + "." + CRDGroupVersion.String()
	NodeGroup_GroupVersionKind = CRDGroupVersion.WithKind(NodeGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&NodeGroup{}, &NodeGroupList{})
}
