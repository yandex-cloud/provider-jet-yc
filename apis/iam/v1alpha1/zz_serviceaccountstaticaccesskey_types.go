/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceAccountStaticAccessKeyObservation struct {
	// ID of the static access key.
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// Creation timestamp of the static access key.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The encrypted secret, base64 encoded. This is only populated when `pgp_key` is supplied.
	EncryptedSecretKey *string `json:"encryptedSecretKey,omitempty" tf:"encrypted_secret_key,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgp_key` is supplied.
	KeyFingerprint *string `json:"keyFingerprint,omitempty" tf:"key_fingerprint,omitempty"`
}

type ServiceAccountStaticAccessKeyParameters struct {

	// +kubebuilder:validation:Optional
	// (Optional) The description of the service account static key.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	// (Optional) An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.
	PgpKey *string `json:"pgpKey,omitempty" tf:"pgp_key,omitempty"`

	// +crossplane:generate:reference:type=ServiceAccount
	// +kubebuilder:validation:Optional
	// (Required) ID of the service account which is used to get a static key.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Reference to a ServiceAccount to populate serviceAccountId.
	// +kubebuilder:validation:Optional
	ServiceAccountIDRef *v1.Reference `json:"serviceAccountIdRef,omitempty" tf:"-"`

	// Selector for a ServiceAccount to populate serviceAccountId.
	// +kubebuilder:validation:Optional
	ServiceAccountIDSelector *v1.Selector `json:"serviceAccountIdSelector,omitempty" tf:"-"`
}

// ServiceAccountStaticAccessKeySpec defines the desired state of ServiceAccountStaticAccessKey
type ServiceAccountStaticAccessKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceAccountStaticAccessKeyParameters `json:"forProvider"`
}

// ServiceAccountStaticAccessKeyStatus defines the observed state of ServiceAccountStaticAccessKey.
type ServiceAccountStaticAccessKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceAccountStaticAccessKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountStaticAccessKey is the Schema for the ServiceAccountStaticAccessKeys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type ServiceAccountStaticAccessKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceAccountStaticAccessKeySpec   `json:"spec"`
	Status            ServiceAccountStaticAccessKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountStaticAccessKeyList contains a list of ServiceAccountStaticAccessKeys
type ServiceAccountStaticAccessKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAccountStaticAccessKey `json:"items"`
}

// Repository type metadata.
var (
	ServiceAccountStaticAccessKey_Kind             = "ServiceAccountStaticAccessKey"
	ServiceAccountStaticAccessKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceAccountStaticAccessKey_Kind}.String()
	ServiceAccountStaticAccessKey_KindAPIVersion   = ServiceAccountStaticAccessKey_Kind + "." + CRDGroupVersion.String()
	ServiceAccountStaticAccessKey_GroupVersionKind = CRDGroupVersion.WithKind(ServiceAccountStaticAccessKey_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceAccountStaticAccessKey{}, &ServiceAccountStaticAccessKeyList{})
}
