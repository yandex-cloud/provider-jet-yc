/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AltNamesObservation struct {
}

type AltNamesParameters struct {

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	FromName *string `json:"fromName,omitempty" tf:"from_name,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	ToName *string `json:"toName,omitempty" tf:"to_name,omitempty"`
}

type ClickhouseSourceObservation struct {
}

type ClickhouseSourceParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []ConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type ClickhouseTargetConnectionObservation struct {
}

type ClickhouseTargetConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []ConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ClickhouseTargetObservation struct {
}

type ClickhouseTargetParameters struct {

	// Table renaming rules. The structure is documented below.
	// +kubebuilder:validation:Optional
	AltNames []AltNamesParameters `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
	// +kubebuilder:validation:Optional
	ClickhouseClusterName *string `json:"clickhouseClusterName,omitempty" tf:"clickhouse_cluster_name,omitempty"`

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []ClickhouseTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Shard selection rules for the data being transferred. The structure is documented below.
	// +kubebuilder:validation:Optional
	Sharding []ShardingParameters `json:"sharding,omitempty" tf:"sharding,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type CollectionsObservation struct {
}

type CollectionsParameters struct {

	// Collection name.
	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ColumnValueHashObservation struct {
}

type ColumnValueHashParameters struct {

	// The name of the column to calculate hash from.
	// +kubebuilder:validation:Optional
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`
}

type ConnectionConnectionOptionsObservation struct {
}

type ConnectionConnectionOptionsOnPremiseObservation struct {
}

type ConnectionConnectionOptionsOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	// +kubebuilder:validation:Optional
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionOptionsOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeObservation struct {
}

type ConnectionConnectionOptionsOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []ConnectionOptionsOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []ConnectionOptionsOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionConnectionOptionsParameters struct {

	// Name of the database to transfer.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []ConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionConnectionOptionsPasswordObservation struct {
}

type ConnectionConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ConnectionObservation struct {
}

type ConnectionOnPremiseObservation struct {
}

type ConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOnPremiseTLSModeDisabledObservation struct {
}

type ConnectionOnPremiseTLSModeDisabledParameters struct {
}

type ConnectionOnPremiseTLSModeEnabledObservation struct {
}

type ConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOnPremiseTLSModeObservation struct {
}

type ConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []ConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []ConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsObservation struct {
}

type ConnectionOptionsOnPremiseObservation struct {
}

type ConnectionOptionsOnPremiseParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	// +kubebuilder:validation:Optional
	Shards []OnPremiseShardsParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []OnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeDisabledObservation struct {
}

type ConnectionOptionsOnPremiseTLSModeDisabledParameters struct {
}

type ConnectionOptionsOnPremiseTLSModeEnabledObservation struct {
}

type ConnectionOptionsOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeObservation struct {
}

type ConnectionOptionsOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []OnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []OnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsParameters struct {

	// Name of the database to transfer.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []OnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionOptionsPasswordObservation struct {
}

type ConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []ConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type DisabledObservation struct {
}

type DisabledParameters struct {
}

type EnabledObservation struct {
}

type EnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type EndpointObservation struct {

	// (Computed) Identifier of a new Data Transfer endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EndpointParameters struct {

	// Arbitrary description text for the endpoint.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings for the endpoint. The structure is documented below.
	// +kubebuilder:validation:Optional
	Settings []SettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type ExcludedCollectionsObservation struct {
}

type ExcludedCollectionsParameters struct {

	// Collection name.
	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type MongoSourceConnectionConnectionOptionsObservation struct {
}

type MongoSourceConnectionConnectionOptionsParameters struct {

	// Name of the database associated with the credentials.
	// +kubebuilder:validation:Optional
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MongodbCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []ConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoSourceConnectionObservation struct {
}

type MongoSourceConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []MongoSourceConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoSourceObservation struct {
}

type MongoSourceParameters struct {

	// The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
	// +kubebuilder:validation:Optional
	Collections []CollectionsParameters `json:"collections,omitempty" tf:"collections,omitempty"`

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []MongoSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// The list of the MongoDB collections that should not be transferred.
	// +kubebuilder:validation:Optional
	ExcludedCollections []ExcludedCollectionsParameters `json:"excludedCollections,omitempty" tf:"excluded_collections,omitempty"`

	// whether the secondary server should be preferred to the primary when copying data.
	// +kubebuilder:validation:Optional
	SecondaryPreferredMode *bool `json:"secondaryPreferredMode,omitempty" tf:"secondary_preferred_mode,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type MongoTargetConnectionConnectionOptionsObservation struct {
}

type MongoTargetConnectionConnectionOptionsOnPremiseObservation struct {
}

type MongoTargetConnectionConnectionOptionsOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	// +kubebuilder:validation:Optional
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionConnectionOptionsOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MongoTargetConnectionConnectionOptionsParameters struct {

	// Name of the database associated with the credentials.
	// +kubebuilder:validation:Optional
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MongodbCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []MongoTargetConnectionConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MongoTargetConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoTargetConnectionConnectionOptionsPasswordObservation struct {
}

type MongoTargetConnectionConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type MongoTargetConnectionObservation struct {
}

type MongoTargetConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []MongoTargetConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoTargetObservation struct {
}

type MongoTargetParameters struct {

	// How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []MongoTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type MySQLSourceConnectionObservation struct {
}

type MySQLSourceConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLSourceObservation struct {
}

type MySQLSourceParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []MySQLSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLDatabase
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Opposite of include_table_regex. The tables matching the specified regular expressions will not be transferred.
	// +kubebuilder:validation:Optional
	ExcludeTablesRegex []*string `json:"excludeTablesRegex,omitempty" tf:"exclude_tables_regex,omitempty"`

	// List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like ^mydb.employees$.
	// +kubebuilder:validation:Optional
	IncludeTablesRegex []*string `json:"includeTablesRegex,omitempty" tf:"include_tables_regex,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	// +kubebuilder:validation:Optional
	ObjectTransferSettings []ObjectTransferSettingsParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MySQLSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLUser
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type MySQLSourcePasswordObservation struct {
}

type MySQLSourcePasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type MySQLTargetConnectionObservation struct {
}

type MySQLTargetConnectionOnPremiseObservation struct {
}

type MySQLTargetConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []MySQLTargetConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeDisabledObservation struct {
}

type MySQLTargetConnectionOnPremiseTLSModeDisabledParameters struct {
}

type MySQLTargetConnectionOnPremiseTLSModeEnabledObservation struct {
}

type MySQLTargetConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeObservation struct {
}

type MySQLTargetConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []MySQLTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []MySQLTargetConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLTargetConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []MySQLTargetConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLTargetObservation struct {
}

type MySQLTargetParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []MySQLTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLDatabase
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MySQLTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// sql_mode to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
	// +kubebuilder:validation:Optional
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// When true, disables foreign key checks. See foreign_key_checks. False by default.
	// +kubebuilder:validation:Optional
	SkipConstraintChecks *bool `json:"skipConstraintChecks,omitempty" tf:"skip_constraint_checks,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLUser
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type MySQLTargetPasswordObservation struct {
}

type MySQLTargetPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ObjectTransferSettingsObservation struct {
}

type ObjectTransferSettingsParameters struct {

	// +kubebuilder:validation:Optional
	Routine *string `json:"routine,omitempty" tf:"routine,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// +kubebuilder:validation:Optional
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type OnPremiseObservation struct {
}

type OnPremiseParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	// +kubebuilder:validation:Optional
	Shards []ShardsParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []TLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type OnPremiseShardsObservation struct {
}

type OnPremiseShardsParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnPremiseTLSModeDisabledObservation struct {
}

type OnPremiseTLSModeDisabledParameters struct {
}

type OnPremiseTLSModeEnabledObservation struct {
}

type OnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type OnPremiseTLSModeObservation struct {
}

type OnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []TLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []TLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PasswordObservation struct {
}

type PasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type PostgresSourceConnectionObservation struct {
}

type PostgresSourceConnectionOnPremiseObservation struct {
}

type PostgresSourceConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []PostgresSourceConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeDisabledObservation struct {
}

type PostgresSourceConnectionOnPremiseTLSModeDisabledParameters struct {
}

type PostgresSourceConnectionOnPremiseTLSModeEnabledObservation struct {
}

type PostgresSourceConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeObservation struct {
}

type PostgresSourceConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []PostgresSourceConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []PostgresSourceConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresSourceConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []PostgresSourceConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresSourceObjectTransferSettingsObservation struct {
}

type PostgresSourceObjectTransferSettingsParameters struct {

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Cast *string `json:"cast,omitempty" tf:"cast,omitempty"`

	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// +kubebuilder:validation:Optional
	Constraint *string `json:"constraint,omitempty" tf:"constraint,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultValues *string `json:"defaultValues,omitempty" tf:"default_values,omitempty"`

	// +kubebuilder:validation:Optional
	FkConstraint *string `json:"fkConstraint,omitempty" tf:"fk_constraint,omitempty"`

	// +kubebuilder:validation:Optional
	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	// +kubebuilder:validation:Optional
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// +kubebuilder:validation:Optional
	MaterializedView *string `json:"materializedView,omitempty" tf:"materialized_view,omitempty"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// +kubebuilder:validation:Optional
	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// +kubebuilder:validation:Optional
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	// +kubebuilder:validation:Optional
	Sequence *string `json:"sequence,omitempty" tf:"sequence,omitempty"`

	// +kubebuilder:validation:Optional
	SequenceOwnedBy *string `json:"sequenceOwnedBy,omitempty" tf:"sequence_owned_by,omitempty"`

	// +kubebuilder:validation:Optional
	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type PostgresSourceObservation struct {
}

type PostgresSourceParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []PostgresSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlDatabase
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	// +kubebuilder:validation:Optional
	ObjectTransferSettings []PostgresSourceObjectTransferSettingsParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PostgresSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty service_schema implies schema "public".
	// +kubebuilder:validation:Optional
	ServiceSchema *string `json:"serviceSchema,omitempty" tf:"service_schema,omitempty"`

	// Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
	// +kubebuilder:validation:Optional
	SlotGigabyteLagLimit *float64 `json:"slotGigabyteLagLimit,omitempty" tf:"slot_gigabyte_lag_limit,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlUser
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type PostgresSourcePasswordObservation struct {
}

type PostgresSourcePasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type PostgresTargetConnectionObservation struct {
}

type PostgresTargetConnectionOnPremiseObservation struct {
}

type PostgresTargetConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []PostgresTargetConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeDisabledObservation struct {
}

type PostgresTargetConnectionOnPremiseTLSModeDisabledParameters struct {
}

type PostgresTargetConnectionOnPremiseTLSModeEnabledObservation struct {
}

type PostgresTargetConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeObservation struct {
}

type PostgresTargetConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []PostgresTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []PostgresTargetConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresTargetConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []PostgresTargetConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresTargetObservation struct {
}

type PostgresTargetParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []PostgresTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlDatabase
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PostgresTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlUser
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type PostgresTargetPasswordObservation struct {
}

type PostgresTargetPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type SettingsObservation struct {
}

type SettingsParameters struct {

	// +kubebuilder:validation:Optional
	ClickhouseSource []ClickhouseSourceParameters `json:"clickhouseSource,omitempty" tf:"clickhouse_source,omitempty"`

	// +kubebuilder:validation:Optional
	ClickhouseTarget []ClickhouseTargetParameters `json:"clickhouseTarget,omitempty" tf:"clickhouse_target,omitempty"`

	// +kubebuilder:validation:Optional
	MongoSource []MongoSourceParameters `json:"mongoSource,omitempty" tf:"mongo_source,omitempty"`

	// +kubebuilder:validation:Optional
	MongoTarget []MongoTargetParameters `json:"mongoTarget,omitempty" tf:"mongo_target,omitempty"`

	// Settings specific to the MySQL source endpoint.
	// +kubebuilder:validation:Optional
	MySQLSource []MySQLSourceParameters `json:"mysqlSource,omitempty" tf:"mysql_source,omitempty"`

	// Settings specific to the MySQL target endpoint.
	// +kubebuilder:validation:Optional
	MySQLTarget []MySQLTargetParameters `json:"mysqlTarget,omitempty" tf:"mysql_target,omitempty"`

	// Settings specific to the PostgreSQL source endpoint.
	// +kubebuilder:validation:Optional
	PostgresSource []PostgresSourceParameters `json:"postgresSource,omitempty" tf:"postgres_source,omitempty"`

	// Settings specific to the PostgreSQL target endpoint.
	// +kubebuilder:validation:Optional
	PostgresTarget []PostgresTargetParameters `json:"postgresTarget,omitempty" tf:"postgres_target,omitempty"`
}

type ShardingObservation struct {
}

type ShardingParameters struct {

	// Shard data by the hash value of the specified column. The structure is documented below.
	// +kubebuilder:validation:Optional
	ColumnValueHash []ColumnValueHashParameters `json:"columnValueHash,omitempty" tf:"column_value_hash,omitempty"`

	// Shard data by ID of the transfer.
	// +kubebuilder:validation:Optional
	TransferID []TransferIDParameters `json:"transferId,omitempty" tf:"transfer_id,omitempty"`
}

type ShardsObservation struct {
}

type ShardsParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TLSModeDisabledObservation struct {
}

type TLSModeDisabledParameters struct {
}

type TLSModeEnabledObservation struct {
}

type TLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type TLSModeObservation struct {
}

type TLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []DisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []EnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TransferIDObservation struct {
}

type TransferIDParameters struct {
}

// EndpointSpec defines the desired state of Endpoint
type EndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointParameters `json:"forProvider"`
}

// EndpointStatus defines the observed state of Endpoint.
type EndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Endpoint is the Schema for the Endpoints API. Manages a Data Transfer endpoint within Yandex.Cloud.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Endpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointSpec   `json:"spec"`
	Status            EndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointList contains a list of Endpoints
type EndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Endpoint `json:"items"`
}

// Repository type metadata.
var (
	Endpoint_Kind             = "Endpoint"
	Endpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Endpoint_Kind}.String()
	Endpoint_KindAPIVersion   = Endpoint_Kind + "." + CRDGroupVersion.String()
	Endpoint_GroupVersionKind = CRDGroupVersion.WithKind(Endpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&Endpoint{}, &EndpointList{})
}
